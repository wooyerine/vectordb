{
	"request": {
		"collection": "leetcode",
		"anns_field": "desc_embedding",
		"param": {
			"metric_type": "L2",
			"params": {
				"ef": 64
			}
		},
		"limit": 5,
		"output_fields": [
			"problem_id",
			"title",
			"level",
			"description",
			"examples",
			"constraints"
		]
	},
	"response": [
		{
			"id": 450411245390794790,
			"distance": 0.5844476819038391,
			"entity": {
				"problem_id": 2425,
				"title": "Bitwise XOR of All Pairings",
				"level": "Medium",
				"description": "You are given two 0-indexed arrays, nums1 and nums2, consisting of non-negative integers. There exists another array, nums3, which contains the bitwise XOR of all pairings of integers between nums1 and nums2 (every integer in nums1 is paired with every integer in nums2 exactly once).\n\nReturn the bitwise XOR of all integers in nums3.",
				"examples": "Example 1:\n\n\nInput: nums1 = [2,1,3], nums2 = [10,2,5,0]\nOutput: 13\nExplanation:\nA possible nums3 array is [8,0,7,2,11,3,4,1,9,1,6,3].\nThe bitwise XOR of all these numbers is 13, so we return 13.\n\n\nExample 2:\n\n\nInput: nums1 = [1,2], nums2 = [3,4]\nOutput: 0\nExplanation:\nAll possible pairs of bitwise XORs are nums1[0] ^ nums2[0], nums1[0] ^ nums2[1], nums1[1] ^ nums2[0],\nand nums1[1] ^ nums2[1].\nThus, one possible nums3 array is [2,5,1,6].\n2 ^ 5 ^ 1 ^ 6 = 0, so we return 0.",
				"constraints": "Constraints:\n\n\n\t1 <= nums1.length, nums2.length <= 10^5\n\t0 <= nums1[i], nums2[j] <= 10^9"
			}
		},
		{
			"id": 450411245390794832,
			"distance": 0.6102784872055054,
			"entity": {
				"problem_id": 2317,
				"title": "Maximum XOR After Operations",
				"level": "Medium",
				"description": "You are given a 0-indexed integer array nums. In one operation, select any non-negative integer x and an index i, then update nums[i] to be equal to nums[i] AND (nums[i] XOR x).\n\nNote that AND is the bitwise AND operation and XOR is the bitwise XOR operation.\n\nReturn the maximum possible bitwise XOR of all elements of nums after applying the operation any number of times.",
				"examples": "Example 1:\n\n\nInput: nums = [3,2,4,6]\nOutput: 7\nExplanation: Apply the operation with x = 4 and i = 3, num[3] = 6 AND (6 XOR 4) = 6 AND 2 = 2.\nNow, nums = [3, 2, 4, 2] and the bitwise XOR of all the elements = 3 XOR 2 XOR 4 XOR 2 = 7.\nIt can be shown that 7 is the maximum possible bitwise XOR.\nNote that other operations may be used to achieve a bitwise XOR of 7.\n\nExample 2:\n\n\nInput: nums = [1,2,3,9,2]\nOutput: 11\nExplanation: Apply the operation zero times.\nThe bitwise XOR of all the elements = 1 XOR 2 XOR 3 XOR 9 XOR 2 = 11.\nIt can be shown that 11 is the maximum possible bitwise XOR.",
				"constraints": "Constraints:\n\n\n\t1 <= nums.length <= 10^5\n\t0 <= nums[i] <= 10^8"
			}
		},
		{
			"id": 450411245390794748,
			"distance": 0.6125133037567139,
			"entity": {
				"problem_id": 2527,
				"title": "Find Xor-Beauty of Array",
				"level": "Medium",
				"description": "You are given a 0-indexed integer array nums.\n\nThe effective value of three indices i, j, and k is defined as ((nums[i] | nums[j]) & nums[k]).\n\nThe xor-beauty of the array is the XORing of the effective values of all the possible triplets of indices (i, j, k) where 0 <= i, j, k < n.\n\nReturn the xor-beauty of nums.\n\nNote that:\n\n\n\tval1 | val2 is bitwise OR of val1 and val2.\n\tval1 & val2 is bitwise AND of val1 and val2.",
				"examples": "Example 1:\n\n\nInput: nums = [1,4]\nOutput: 5\nExplanation: \nThe triplets and their corresponding effective values are listed below:\n- (0,0,0) with effective value ((1 | 1) & 1) = 1\n- (0,0,1) with effective value ((1 | 1) & 4) = 0\n- (0,1,0) with effective value ((1 | 4) & 1) = 1\n- (0,1,1) with effective value ((1 | 4) & 4) = 4\n- (1,0,0) with effective value ((4 | 1) & 1) = 1\n- (1,0,1) with effective value ((4 | 1) & 4) = 4\n- (1,1,0) with effective value ((4 | 4) & 1) = 0\n- (1,1,1) with effective value ((4 | 4) & 4) = 4 \nXor-beauty of array will be bitwise XOR of all beauties = 1 ^ 0 ^ 1 ^ 4 ^ 1 ^ 4 ^ 0 ^ 4 = 5.\n\nExample 2:\n\n\nInput: nums = [15,45,20,2,34,35,5,44,32,30]\nOutput: 34\nExplanation: The xor-beauty of the given array is 34.",
				"constraints": "Constraints:\n\n\n\t1 <= nums.lengthÂ <= 10^5\n\t1 <= nums[i] <= 10^9"
			}
		},
		{
			"id": 450411245390793395,
			"distance": 0.6504181623458862,
			"entity": {
				"problem_id": 2980,
				"title": "Check if Bitwise OR Has Trailing Zeros",
				"level": "Easy",
				"description": "You are given an array of positive integers nums.\n\nYou have to check if it is possible to select two or more elements in the array such that the bitwise OR of the selected elements has at least one trailing zero in its binary representation.\n\nFor example, the binary representation of 5, which is \"101\", does not have any trailing zeros, whereas the binary representation of 4, which is \"100\", has two trailing zeros.\n\nReturn true if it is possible to select two or more elements whose bitwise OR has trailing zeros, return false otherwise.",
				"examples": "Example 1:\n\n\nInput: nums = [1,2,3,4,5]\nOutput: true\nExplanation: If we select the elements 2 and 4, their bitwise OR is 6, which has the binary representation \"110\" with one trailing zero.\n\n\nExample 2:\n\n\nInput: nums = [2,4,8,16]\nOutput: true\nExplanation: If we select the elements 2 and 4, their bitwise OR is 6, which has the binary representation \"110\" with one trailing zero.\nOther possible ways to select elements to have trailing zeroes in the binary representation of their bitwise OR are: (2, 8), (2, 16), (4, 8), (4, 16), (8, 16), (2, 4, 8), (2, 4, 16), (2, 8, 16), (4, 8, 16), and (2, 4, 8, 16).\n\n\nExample 3:\n\n\nInput: nums = [1,3,5,7,9]\nOutput: false\nExplanation: There is no possible way to select two or more elements to have trailing zeros in the binary representation of their bitwise OR.",
				"constraints": "Constraints:\n\n\n\t2 <= nums.length <= 100\n\t1 <= nums[i] <= 100"
			}
		},
		{
			"id": 450411245390794205,
			"distance": 0.715209424495697,
			"entity": {
				"problem_id": 1879,
				"title": "Minimum XOR Sum of Two Arrays",
				"level": "Hard",
				"description": "You are given two integer arrays nums1 and nums2 of length n.\n\nThe XOR sum of the two integer arrays is (nums1[0] XOR nums2[0]) + (nums1[1] XOR nums2[1]) + ... + (nums1[n - 1] XOR nums2[n - 1]) (0-indexed).\n\n\n\tFor example, the XOR sum of [1,2,3] and [3,2,1] is equal to (1 XOR 3) + (2 XOR 2) + (3 XOR 1) = 2 + 0 + 2 = 4.\n\n\nRearrange the elements of nums2 such that the resulting XOR sum is minimized.\n\nReturn the XOR sum after the rearrangement.",
				"examples": "Example 1:\n\n\nInput: nums1 = [1,2], nums2 = [2,3]\nOutput: 2\nExplanation: Rearrange nums2 so that it becomes [3,2].\nThe XOR sum is (1 XOR 3) + (2 XOR 2) = 2 + 0 = 2.\n\nExample 2:\n\n\nInput: nums1 = [1,0,3], nums2 = [5,3,4]\nOutput: 8\nExplanation: Rearrange nums2 so that it becomes [5,4,3]. \nThe XOR sum is (1 XOR 5) + (0 XOR 4) + (3 XOR 3) = 4 + 4 + 0 = 8.",
				"constraints": "Constraints:\n\n\n\tn == nums1.length\n\tn == nums2.length\n\t1 <= n <= 14\n\t0 <= nums1[i], nums2[i] <= 10^7"
			}
		}
	]
}
