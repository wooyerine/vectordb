{"request": {"collection": "grepp", "anns_field": "desc_embedding", "param": {"metric_type": "L2", "params": {"ef": 64}}, "limit": 5, "output_fields": ["problem_id", "title", "level", "description", "examples", "constraints"]}, "response": [{"id": 450411245390795779, "distance": 1.1229935884475708, "entity": {"problem_id": 477, "title": "소수 만들기", "level": 1, "description": "주어진 숫자 중 3개의 수를 더했을 때 소수가 되는 경우의 개수를 구하려고 합니다. 숫자들이 들어있는 배열 nums가 매개변수로 주어질 때, nums에 있는 숫자들 중 서로 다른 3개를 골라 더했을 때 소수가 되는 경우의 개수를 return 하도록 solution 함수를 완성해주세요.\r\n\r\n#####제한사항\r\n* nums에 들어있는 숫자의 개수는 3개 이상 50개 이하입니다.\r\n* nums의 각 원소는 1 이상 1,000 이하의 자연수이며, 중복된 숫자가 들어있지 않습니다.\r\n\r\n---\r\n#####입출력 예\r\n| nums        | result |\r\n|-------------|--------|\r\n| [1,2,3,4]   | 1      |\r\n| [1,2,7,6,4] | 4      |\r\n\r\n#####입출력 예 설명\r\n입출력 예 #1\r\n[1,2,4]를 이용해서 7을 만들 수 있습니다.\r\n\r\n입출력 예 #2\r\n[1,2,4]를 이용해서 7을 만들 수 있습니다.\r\n[1,4,6]을 이용해서 11을 만들 수 있습니다.\r\n[2,4,7]을 이용해서 13을 만들 수 있습니다.\r\n[4,6,7]을 이용해서 17을 만들 수 있습니다", "examples": ".", "constraints": ""}}, {"id": 450411245390795757, "distance": 1.2057265043258667, "entity": {"problem_id": 9060, "title": "없는 숫자 더하기", "level": 1, "description": "0부터 9까지의 숫자 중 일부가 들어있는 정수 배열 `numbers`가 매개변수로 주어집니다. `numbers`에서 찾을 수 없는 0부터 9까지의 숫자를 모두 찾아 더한 수를 return 하도록 solution 함수를 완성해주세요.\r\n\r\n---", "examples": "##### 입출력 예\r\n\r\n| numbers             | result |\r\n| ------------------- | ------ |\r\n| [1,2,3,4,6,7,8,0] | 14     |\r\n| [5,8,4,0,6,7,9]   | 6      |\r\n\r\n---\r\n\r\n##### 입출력 예 설명\r\n\r\n**입출력 예 #1**\r\n\r\n* 5, 9가 `numbers`에 없으므로, 5 + 9 = 14를 return 해야 합니다.\r\n\r\n**입출력 예 #2**\r\n\r\n* 1, 2, 3이 `numbers`에 없으므로, 1 + 2 + 3 = 6을 return 해야 합니다.", "constraints": "##### 제한사항\r\n\r\n* 1 ≤ `numbers`의 길이 ≤ 9\r\n * 0 ≤ `numbers`의 모든 원소 ≤ 9\r\n * `numbers`의 모든 원소는 서로 다릅니다.\r\n\r\n---"}}, {"id": 450411245390795856, "distance": 1.2095894813537598, "entity": {"problem_id": 7928, "title": "2개 이하로 다른 비트", "level": 2, "description": "양의 정수 `x`에 대한 함수 `f(x)`를 다음과 같이 정의합니다.\r\n\r\n- `x`보다 크고 `x`와 **비트가 1~2개 다른** 수들 중에서 제일 작은 수\r\n\r\n예를 들어, \r\n\r\n- `f(2) = 3` 입니다. 다음 표와 같이 2보다 큰 수들 중에서 비트가 다른 지점이 2개 이하이면서 제일 작은 수가 3이기 때문입니다.\r\n\r\n| 수  | 비트         | 다른 비트의 개수 |\r\n| --- | ------------ | ---------------- |\r\n| 2   | `000...0010` |                  |\r\n| 3   | `000...0011` | 1                |\r\n\r\n- `f(7) = 11` 입니다. 다음 표와 같이 7보다 큰 수들 중에서 비트가 다른 지점이 2개 이하이면서 제일 작은 수가 11이기 때문입니다.\r\n\r\n| 수  | 비트         | 다른 비트의 개수 |\r\n| --- | ------------ | ---------------- |\r\n| 7   | `000...0111` |                  |\r\n| 8   | `000...1000` | 4                |\r\n| 9   | `000...1001` | 3                |\r\n| 10  | `000...1010` | 3                |\r\n| 11  | `000...1011` | 2                |\r\n\r\n정수들이 담긴 배열 `numbers`가 매개변수로 주어집니다. `numbers`의 모든 수들에 대하여 각 수의 `f` 값을 배열에 차례대로 담아 return 하도록 solution 함수를 완성해주세요.\r\n\r\n---", "examples": "##### 입출력 예\r\n\r\n| numbers | result   |\r\n| ------- | -------- |\r\n| `[2,7]` | `[3,11]` |\r\n\r\n---\r\n\r\n##### 입출력 예 설명\r\n\r\n**입출력 예 #1**\r\n\r\n* 문제 예시와 같습니다.", "constraints": "##### 제한사항\r\n\r\n* 1 ≤ `numbers`의 길이 ≤ 100,000\r\n* 0 ≤ `numbers`의 모든 수 ≤ 10^(15)\r\n\r\n---"}}, {"id": 450411245390796031, "distance": 1.2316850423812866, "entity": {"problem_id": 14647, "title": "숫자 비교하기", "level": 0, "description": "정수 `num1`과 `num2`가 매개변수로 주어집니다. 두 수가 같으면 1 다르면 -1을 retrun하도록 solution 함수를 완성해주세요.\r\n\r\n- - -", "examples": "##### 입출력 예\r\n\r\n| num1 | num2 | result |\r\n| --- | --- | --- |\r\n| 2 | 3 | -1 |\r\n| 11 | 11 | 1 |\r\n| 7 | 99 | -1 |\r\n\r\n- - -\r\n\r\n##### 입출력 예 설명\r\n\r\n입출력 예 설명 #1\r\n\r\n* `num1`이 2이고 `num2`가 3이므로 다릅니다. 따라서 -1을 return합니다.\r\n\r\n입출력 예 설명 #2\r\n\r\n* `num1`이 11이고 `num2`가 11이므로 같습니다. 따라서 1을 return합니다.\r\n\r\n입출력 예 설명 #3\r\n\r\n* `num1`이 7이고 `num2`가 99이므로 다릅니다. 따라서 -1을 return합니다.", "constraints": "##### 제한사항\r\n\r\n* 0 ≤ `num1` ≤ 10,000\r\n* 0 ≤ `num2` ≤ 10,000\r\n\r\n- - -"}}, {"id": 450411245390796043, "distance": 1.2516294717788696, "entity": {"problem_id": 14650, "title": "나머지 구하기", "level": 0, "description": "정수 `num1`, `num2`가 매개변수로 주어질 때, `num1`를 `num2`로 나눈 나머지를 return 하도록 solution 함수를 완성해주세요.\r\n\r\n- - -\r\n\r\n#### 제한사항\r\n\r\n- 0 < `num1` ≤ 100\r\n- 0 < `num2` ≤ 100\r\n\r\n- - -\r\n\r\n#### 입출력 예\r\n\r\n| num1 | num2 | result |\r\n| --- | --- | --- |\r\n| 3 | 2 | 1 |\r\n| 10 | 5 | 0 |\r\n\r\n- - -\r\n\r\n#### 입출력 예 설명\r\n\r\n입출력 예 #1\r\n\r\n* `num1`이 3, `num2`가 2이므로 3을 2로 나눈 나머지 1을 return 합니다.\r\n\r\n\r\n\r\n입출력 예 #2\r\n* `num1`이 10, `num2`가 5이므로 10을 5로 나눈 나머지 0을 return 합니다", "examples": ".", "constraints": ""}}]}