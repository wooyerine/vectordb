{"request": {"collection": "leetcode", "anns_field": "desc_embedding", "param": {"metric_type": "L2", "params": {"ef": 64}}, "limit": 6, "output_fields": ["problem_id", "title", "level", "description", "examples", "constraints"]}, "response": [{"id": 450411245390794872, "distance": 1.1196906566619873, "entity": {"problem_id": 2212, "title": "Maximum Points in an Archery Competition", "level": "Medium", "description": "Alice and Bob are opponents in an archery competition. The competition has set the following rules:\n\n\n\tAlice first shoots numArrows arrows and then Bob shoots numArrows arrows.\n\tThe points are then calculated as follows:\n\t\n\t\tThe target has integer scoring sections ranging from 0 to 11 inclusive.\n\t\tFor each section of the target with score k (in between 0 to 11), say Alice and Bob have shot ak and bk arrows on that section respectively. If ak >= bk, then Alice takes k points. If ak < bk, then Bob takes k points.\n\t\tHowever, if ak == bk == 0, then nobody takes k points.\n\t\n\t\n\n\n\n\t\n\tFor example, if Alice and Bob both shot 2 arrows on the section with score 11, then Alice takes 11 points. On the other hand, if Alice shot 0 arrows on the section with score 11 and Bob shot 2 arrows on that same section, then Bob takes 11 points.\n\t\n\n\nYou are given the integer numArrows and an integer array aliceArrows of size 12, which represents the number of arrows Alice shot on each scoring section from 0 to 11. Now, Bob wants to maximize the total number of points he can obtain.\n\nReturn the array bobArrows which represents the number of arrows Bob shot on each scoring section from 0 to 11. The sum of the values in bobArrows should equal numArrows.\n\nIf there are multiple ways for Bob to earn the maximum total points, return any one of them.", "examples": "Example 1:\n\n\nInput: numArrows = 9, aliceArrows = [1,1,0,1,0,0,2,1,0,1,2,0]\nOutput: [0,0,0,0,1,1,0,0,1,2,3,1]\nExplanation: The table above shows how the competition is scored. \nBob earns a total point of 4 + 5 + 8 + 9 + 10 + 11 = 47.\nIt can be shown that Bob cannot obtain a score higher than 47 points.\n\n\nExample 2:\n\n\nInput: numArrows = 3, aliceArrows = [0,0,1,0,0,0,0,0,0,0,0,2]\nOutput: [0,0,0,0,0,0,0,0,1,1,1,0]\nExplanation: The table above shows how the competition is scored.\nBob earns a total point of 8 + 9 + 10 = 27.\nIt can be shown that Bob cannot obtain a score higher than 27 points.", "constraints": "Constraints:\n\n\n\t1 <= numArrows <= 10^5\n\taliceArrows.length == bobArrows.length == 12\n\t0 <= aliceArrows[i], bobArrows[i] <= numArrows\n\tsum(aliceArrows[i]) == numArrows"}}, {"id": 450411245390795075, "distance": 1.1250078678131104, "entity": {"problem_id": 1686, "title": "Stone Game VI", "level": "Medium", "description": "Alice and Bob take turns playing a game, with Alice starting first.\n\nThere are n stones in a pile. On each player's turn, they can remove a stone from the pile and receive points based on the stone's value. Alice and Bob may value the stones differently.\n\nYou are given two integer arrays of length n, aliceValues and bobValues. Each aliceValues[i] and bobValues[i] represents how Alice and Bob, respectively, value the i^th stone.\n\nThe winner is the person with the most points after all the stones are chosen. If both players have the same amount of points, the game results in a draw. Both players will play optimally.Â Both players know the other's values.\n\nDetermine the result of the game, and:\n\n\n\tIf Alice wins, return 1.\n\tIf Bob wins, return -1.\n\tIf the game results in a draw, return 0.", "examples": "Example 1:\n\n\nInput: aliceValues = [1,3], bobValues = [2,1]\nOutput: 1\nExplanation:\nIf Alice takes stone 1 (0-indexed) first, Alice will receive 3 points.\nBob can only choose stone 0, and will only receive 2 points.\nAlice wins.\n\n\nExample 2:\n\n\nInput: aliceValues = [1,2], bobValues = [3,1]\nOutput: 0\nExplanation:\nIf Alice takes stone 0, and Bob takes stone 1, they will both have 1 point.\nDraw.\n\n\nExample 3:\n\n\nInput: aliceValues = [2,4,3], bobValues = [1,6,7]\nOutput: -1\nExplanation:\nRegardless of how Alice plays, Bob will be able to have more points than Alice.\nFor example, if Alice takes stone 1, Bob can take stone 2, and Alice takes stone 0, Alice will have 6 points to Bob's 7.\nBob wins.", "constraints": "Constraints:\n\n\n\tn == aliceValues.length == bobValues.length\n\t1 <= n <= 10^5\n\t1 <= aliceValues[i], bobValues[i] <= 100"}}, {"id": 450411245390794206, "distance": 1.1286561489105225, "entity": {"problem_id": 1872, "title": "Stone Game VIII", "level": "Hard", "description": "Alice and Bob take turns playing a game, with Alice starting first.\r\n\r\nThere are n stones arranged in a row. On each player's turn, while the number of stones is more than one, they will do the following:\r\n\r\n\r\n\tChoose an integer x > 1, and remove the leftmost x stones from the row.\r\n\tAdd the sum of the removed stones' values to the player's score.\r\n\tPlace a new stone, whose value is equal to that sum, on the left side of the row.\r\n\r\n\r\nThe game stops when only one stone is left in the row.\r\n\r\nThe score difference between Alice and Bob is (Alice's score - Bob's score). Alice's goal is to maximize the score difference, and Bob's goal is the minimize the score difference.\r\n\r\nGiven an integer array stones of length n where stones[i] represents the value of the i^th stone from the left, return the score difference between Alice and Bob if they both play optimally.", "examples": "", "constraints": ""}}, {"id": 450411245390793451, "distance": 1.1761502027511597, "entity": {"problem_id": 2660, "title": "Determine the Winner of a Bowling Game", "level": "Easy", "description": "You are given two 0-indexed integer arrays player1 and player2, representing the number of pins that player 1 and player 2 hit in a bowling game, respectively.\n\nThe bowling game consists of n turns, and the number of pins in each turn is exactly 10.\n\nAssume a player hits xi pins in the i^th turn. The value of the i^th turn for the player is:\n\n\n\t2xi if the player hits 10 pins in either (i - 1)^th or (i - 2)^th turn.\n\tOtherwise, it is xi.\n\n\nThe score of the player is the sum of the values of their n turns.\n\nReturn\n\n\n\t1 if the score of player 1 is more than the score of player 2,\n\t2 if the score of player 2 is more than the score of player 1, and\n\t0 in case of a draw.", "examples": "Example 1:\n\n\nInput: player1 = [5,10,3,2], player2 = [6,5,7,3]\n\nOutput: 1\n\nExplanation:\n\nThe score of player 1 is 5 + 10 + 2*3 + 2*2 = 25.\n\nThe score of player 2 is 6 + 5 + 7 + 3 = 21.\n\n\nExample 2:\n\n\nInput: player1 = [3,5,7,6], player2 = [8,10,10,2]\n\nOutput: 2\n\nExplanation:\n\nThe score of player 1 is 3 + 5 + 7 + 6 = 21.\n\nThe score of player 2 is 8 + 10 + 2*10 + 2*2 = 42.\n\n\nExample 3:\n\n\nInput: player1 = [2,3], player2 = [4,1]\n\nOutput: 0\n\nExplanation:\n\nThe score of player1 is 2 + 3 = 5.\n\nThe score of player2 is 4 + 1 = 5.\n\n\nExample 4:\n\n\nInput: player1 = [1,1,1,10,10,10,10], player2 = [10,10,10,10,1,1,1]\n\nOutput: 1\n\nExplanation:\n\nThe score of player1 is 1 + 1 + 1 + 10 + 2*10 + 2*10 + 2*10 = 73.\n\nThe score of player2 is 10 + 2*10 + 2*10 + 2*10 + 2*1 + 2*1 + 1 = 75.", "constraints": "Constraints:\n\n\n\tn == player1.length == player2.length\n\t1 <= n <= 1000\n\t0 <= player1[i], player2[i] <= 10"}}, {"id": 450411245390795073, "distance": 1.1922030448913574, "entity": {"problem_id": 1690, "title": "Stone Game VII", "level": "Medium", "description": "Alice and Bob take turns playing a game, with Alice starting first.\n\nThere are n stones arranged in a row. On each player's turn, they can remove either the leftmost stone or the rightmost stone from the row and receive points equal to the sum of the remaining stones' values in the row. The winner is the one with the higher score when there are no stones left to remove.\n\nBob found that he will always lose this game (poor Bob, he always loses), so he decided to minimize the score's difference. Alice's goal is to maximize the difference in the score.\n\nGiven an array of integers stones where stones[i] represents the value of the i^th stone from the left, return the difference in Alice and Bob's score if they both play optimally.", "examples": "Example 1:\n\n\nInput: stones = [5,3,1,4,2]\nOutput: 6\nExplanation: \n- Alice removes 2 and gets 5 + 3 + 1 + 4 = 13 points. Alice = 13, Bob = 0, stones = [5,3,1,4].\n- Bob removes 5 and gets 3 + 1 + 4 = 8 points. Alice = 13, Bob = 8, stones = [3,1,4].\n- Alice removes 3 and gets 1 + 4 = 5 points. Alice = 18, Bob = 8, stones = [1,4].\n- Bob removes 1 and gets 4 points. Alice = 18, Bob = 12, stones = [4].\n- Alice removes 4 and gets 0 points. Alice = 18, Bob = 12, stones = [].\nThe score difference is 18 - 12 = 6.\n\n\nExample 2:\n\n\nInput: stones = [7,90,5,1,100,10,10,2]\nOutput: 122", "constraints": "Constraints:\n\n\n\tn == stones.length\n\t2 <= n <= 1000\n\t1 <= stones[i] <= 1000"}}, {"id": 450411245390794942, "distance": 1.2013216018676758, "entity": {"problem_id": 2038, "title": "Remove Colored Pieces if Both Neighbors are the Same Color", "level": "Medium", "description": "There are n pieces arranged in a line, and each piece is colored either by 'A' or by 'B'. You are given a string colors of length n where colors[i] is the color of the i^th piece.\n\nAlice and Bob are playing a game where they take alternating turns removing pieces from the line. In this game, Alice moves first.\n\n\n\tAlice is only allowed to remove a piece colored 'A' if both its neighbors are also colored 'A'. She is not allowed to remove pieces that are colored 'B'.\n\tBob is only allowed to remove a piece colored 'B' if both its neighbors are also colored 'B'. He is not allowed to remove pieces that are colored 'A'.\n\tAlice and Bob cannot remove pieces from the edge of the line.\n\tIf a player cannot make a move on their turn, that player loses and the other player wins.\n\n\nAssuming Alice and Bob play optimally, return true if Alice wins, or return false if Bob wins.", "examples": "Example 1:\n\n\nInput: colors = \"AAABABB\"\nOutput: true\nExplanation:\nAAABABB -> AABABB\nAlice moves first.\nShe removes the second 'A' from the left since that is the only 'A' whose neighbors are both 'A'.\n\nNow it's Bob's turn.\nBob cannot make a move on his turn since there are no 'B's whose neighbors are both 'B'.\nThus, Alice wins, so return true.\n\n\nExample 2:\n\n\nInput: colors = \"AA\"\nOutput: false\nExplanation:\nAlice has her turn first.\nThere are only two 'A's and both are on the edge of the line, so she cannot move on her turn.\nThus, Bob wins, so return false.\n\n\nExample 3:\n\n\nInput: colors = \"ABBBBBBBAAA\"\nOutput: false\nExplanation:\nABBBBBBBAAA -> ABBBBBBBAA\nAlice moves first.\nHer only option is to remove the second to last 'A' from the right.\n\nABBBBBBBAA -> ABBBBBBAA\nNext is Bob's turn.\nHe has many options for which 'B' piece to remove. He can pick any.\n\nOn Alice's second turn, she has no more pieces that she can remove.\nThus, Bob wins, so return false.", "constraints": "Constraints:\n\n\n\t1 <=Â colors.length <= 10^5\n\tcolorsÂ consists of only the lettersÂ 'A'Â andÂ 'B'"}}]}