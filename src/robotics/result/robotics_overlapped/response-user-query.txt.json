{
	"request": {
		"collection": "robotics_overlapped",
		"anns_field": "embedding",
		"param": {
			"metric_type": "L2",
			"params": {
				"ef": 64
			}
		},
		"limit": 5,
		"output_fields": [
			"id",
			"description"
		]
	},
	"response": [
		{
			"id": 450838759703112282,
			"distance": 0.9366427659988403,
			"entity": {
				"id": 450838759703112282,
				"description": "rpm입니다. -10000~10000 의 값을 설정할 수 있으며, default값은 0입니다. -로 지정된 경우는 모터가 역회전 합니다. 문법 var res _vel_rpm_cmd[6] = 1000 # 7축의 모터를 1000rpm으로 회전 res = _vel_rpm_cmd[6] # 7축의 모터 회전속도를 얻음 사용 예 ... # 현재 7축의 모터회전 속도 출력한 후, 1000 rpm으로 설정한다. print _vel_rpm_cmd[6] _vel_rpm_cmd[6]=1000 ... end </s><s> _weaving 문 설명 _weaving문은 현재 선택된 위빙 조건을 변경하기 위해서 사용합니다. 문법 _weaving.frequency=2 _weaving.angle=5 파라미터 항목 의미 기타 weave 위빙 형태 (0=단진동, 1=삼각, 2=L형, 3=원형) 변수 frequency 주파수[Hz] 변수 left_distance 벽방향 거리[mm] 변수 right_distance 타방향 거리[mm] 변수 angle 각도[deg] 변수 offset_angle 옵셋 각도[deg] 변수 wall_direction 벽방향 (0=수직, 1=수평, 2=토치 자세기준) 변수 forward_angle 진행각도[deg] 변수 boundary_limit 경계제한 (0=유효, 1=무효) 변수 segment_time_1 구간 (1~4) 이동시간[s] 변수 segment_delay_1 구간 (1~4) 타이머(위빙정지)[s] 변수 height_sensing_mode 높이센싱 모드 (0=전류변화, 1=좌측 고정, 2=우측 고정) 변수 side_sensing_mode 좌우센싱 모드 (0=중심선, 1=왼쪽, 2=오른쪽) 변수 asymetric_sensing_ratio 비대칭 센싱 비율 (-50~50) [%] 변수 side_sensing_sensitivity 좌우센싱 민감도 (0~10) 변수 height_sensing_sensitivity 높이센싱 민감도 (0~10) 변수 사용 예 weaving on,cnd=1 move P,spd=50%,accu=3,tool=1 _weaving.frequency=5 # 위빙주파수를 5Hz로 변경 move P,spd=50%,accu=3,tool=1 weaving off end </s><s>Hyundai Robot Job File; { version: 1.6, mech_type: \"-1()\", total_axis: -1, aux_axis: -1 } # \"0020_KD_EnetSub1.job\" # 프로토콜 시험용 - 서브태스크 프로그램2 # 통신 프로그램 시험용 - 명령어 송수신용 #――――――――――――――――――――――――――――――――――――――――――――――――― #――――――――――――――――――――――――――――――――――――――――――――――――― # 변수 설정 *Set var Len # 데이터 길이 확인용 변수 # 통신 파라미터 설정 TCP_S1.ip_addr=\"192.168.1.2\" # remote (상대방) IP address TCP_S1.lport=5600 # local (자신) port; TCP Server port # (port no. 49152–65535 contains dynamic or private ports) # 이더넷 소켓 열기 TCP_S1.open TCP_S1.listen() TCP_S1.accept() 500000,*TimeOut # client로부터의 connect 대기 print TCP_S1.state() # 1이면 정상 if TCP_S1.state()!=1 then *Comm_Error task sync,id=1,no=3 # ENet객체 생성을 위한 동기 #print \"Sync with maintask & subtask1\" #――――――――――――――――――――――――――――――――――――――――――――――――― # 명령어 수신 *Loop Msg_C1=TCP_S1.recv # 데이터 수신, 대기시간: 없음 print Msg_C1 # 수신 명령어 분석 Len=len(Msg_C1) if Len<8 then *Error # 데이터 누락 시 종료 Cmd=left(Msg_C1,7) # 커맨드 추출 if Len>8 Op_Data=mid(Msg_C1,7,Len-7) # 옵션데이터 추출 endif delay 0.01 goto *Loop #――――――――――――――――――――――――――――――――――――――――――――――――― # 이더넷 소켓 닫기 *Exit TCP_S1.close print TCP_S1.state() # 0이면 정상 delay 1 end #――――――――――――――――――――――――――――――――――――――――――――――――― #――――――――――――――――――――――――――――――――――――――――――――――――― *TimeOut print \"time out!\" TCP_S1.close delay 1 end #――――――――――――――――――――――――――――――――――――――――――――――――― *Error print \"Received Value Error : \" + Msg_C1 TCP_S1.close delay 1 end #――――――――――――――――――――――――――――――――――――――――――――――――― *Comm_Error print \"Ethernet Connection Error!\" TCP_S1.close delay 1 end </s><s>Hyundai Robot Job File; { version: 1.6, mech_type: \"-1()\", total_axis: -1, aux_axis: -1 } # \"0090_KD_RESETR.job\" # 프로토콜 시험용 - 서브프로그램9 #엔드리스 축 초기화 #――――――――――――――――――――――――――――――――――――――――――――――――― #――――――――――――――――――――――――――――――――――――――――――――――――― Echo=\"\" Echo=\"@RESETR#\" TCP_S1.send Echo # 에코 응답 발송 delay 1.5 #로봇정지 endless reset,axis=6,count=1 #엔드리스 초기화 # 명령어, 에코, 옵션 데이터 초기화 Echo=\"\" Op_Data=\"\" Cmd=\"\" #――――――――――――――――――――――――――――――――――――――――――――――――― end </s><s>Hyundai Robot Job File; { version: 2.0, mech_type: \"576(HH020-03)\", total_axis: 6, aux_axis: 0 } S1 move P,spd=60%,accu=0,tool=31 [-2.593,-2.693,119.974,1.126,-1.123,-0.306,\"u3\",\"nf\"] S2 move P,spd=60%,accu=0,tool=31 [98.363,-2.202,119.965,1.126,-1.122,-0.307,\"u3\",\"r1;nf\"] S3 move P,spd=60%,accu=0,tool=31 [-0.963,98.072,120.694,1.125,-1.121,-0.308,\"u3\",\"nf\"] </s><s>Hyundai Robot Job File; { version: 2.0, mech_type: \"576(HH020-03)\", total_axis: 6, aux_axis: 0 } S1 move L,spd=20%,accu=3,tool=31 [-0.857,98.139,-23.176,-0.266,-74.959,-180.782] S2 move L,spd=20%,accu=3,tool=31 [-0.025,0.011,0.018,0.001,0.003,-27.421,\"u1\",\"nf\"] S3 move L,spd=20%,accu=3,tool=31 [0.052,-0.026,0.022,0.000,0.002,-56.544,\"u1\",\"nf\"] S4 move L,spd=20%,accu=3,tool=31 [-0.021,0.011,0.018,-0.001,0.000,-84.999,\"u1\",\"auto\"] S5 move L,spd=20%,accu=3,tool=31 [-0.014,-0.018,0.026,0.000,0.000,-109.875,\"u1\",\"auto\"] S6 move L,spd=20%,accu=3,tool=31 [-0.077,-0.001,0.027,0.000,-0.003,-133.019,\"u1\",\"auto\"] S7 move L,spd=20%,accu=3,tool=31 [-0.100,-0.015,0.029,0.003,-0.001,-161.826,\"u1\",\"auto\"] S8 move L,spd=20%,accu=3,tool=31 [-0.073,-0.025,0.031,0.006,-0.002,175.248,\"u1\",\"auto\"] S9 move L,spd=20%,accu=3,tool=31 [0.039,0.009,0.028,0.001,0.005,160.204,\"u1\",\"auto\"] S10 move L,spd=20%,accu=3,tool=31 [-0.006,-0.012,0.015,0.007,-0.001,143.694,\"u1\",\"auto\"] S11 move L,spd=20%,accu=3,tool=31 [-0.062,0.023,0.031,0.008,-0.004,127.121,\"u1\",\"auto\"] S12 move L,spd=20%,accu=3,tool=31 [-0.036,0.018,0.006,0.008,0.001,111.320,\"u1\",\"auto\"] S13 move L,spd=20%,accu=3,tool=31 [-0.036,0.007,0.013,0.006,0.003,92.931,\"u1\",\"auto\"] S14 move L,spd=20%,accu=3,tool=31 [-0.020,-0.003,0.011,0.006,0.003,77.735,\"u1\",\"auto\"] S15 move L,spd=20%,accu=3,tool=31 [-0.042,-0.046,-0.001,0.003,0.009,62.088,\"u1\",\"auto\"] S16 move L,spd=20%,accu=3,tool=31 [-0.029,0.024,0.014,0.004,0.004,44.476,\"u1\",\"auto\"] S17 move L,spd=20%,accu=3,tool=31 [-0.014,0.031,0.023,0.005,0.004,31.040,\"u1\",\"auto\"] S18 move L,spd=20%,accu=3,tool=31 [0.097,0.011,-0.003,0.001,0.004,9.269,\"u1\",\"auto\"] S19 move L,spd=20%,accu=3,tool=31 [-0.007,0.010,0.012,0.002,0.004,-6.810,\"u1\",\"auto\"] end </s><s>Hyundai Robot Job File; { version: 1.6, mech_type: \"-1()\", total_axis: -1, aux_axis: -1 } # \"0022_KD_EnetSub2.job\" # 프로토콜 시험용 - 서브태스크 프로그램2 # 통신 프로그램 시험용 - 데이터 처리 함수 모음 #――――――――――――――――――――――――――――――――――――――――――――――――― #――――――――――――――――――――――――――――――――――――――――――――――――― goto *Exit #――――――――――――――――――――――――――――――――――――――――――――――――― #――――――――――――――――――――――――――――――――――――――――――――――――― # 포즈&속도 데이터 변수 대입(단순 길이 계산) def Data_Set1, Msg_X, Pos_N[Buf_I] # 변수 선언 var Msg_P # 포즈 저장용 변수 var Count # for문용 변수 for Count=0 to Pos_N[Buf_I]-1 # Pos_N[Buf_I]개 데이터 처리 Msg_P=left(Msg_X, 48) # 포즈1개 좌표 추출 W_Pos[Buf_I][Count+INDEXEND]=Pose(\"[\" + Msg_P + \"\\\"u\\\",\\\"auto\\\"]\") # 포즈 대입 W_Vel[Buf_I][Count+INDEXEND]=int(mid(Msg_X,48,2)) # 속도 2자리 추출 및 대입 Msg_X = right(Msg_X,len(Msg_X)-51) # 잔여 메시지 대입 next ## 포즈 개수 외 데이터 초기화 #for Count= Pos_N[Buf_I] to 5000 # 잔여 (100 - Pos_N[Buf_I]) 데이터 처리 #W_Pos[Buf_I][Count] = Pose(0,0,0,0,0,0,\"u\",\"auto\") #W_Vel[Buf_I][Count] = 0 #next return goto *Exit #――――――――――――――――――――――――――――――――――――――――――――――――― #――――――――――――――――――――――――――――――――――――――――――――――――― *Exit end </s><s>Hyundai Robot Job File; { version: 1.6, mech_type: \"-1()\", total_axis: -1, aux_axis: -1 } # \"0050_KD_GOHOME.job\" # 프로토콜 시험용 - 서브프로그램5 # 미리 정의한 대기위치로 이동 #――――――――――――――――――――――――――――――――――――――――――――――――― #――――――――――――――――――――――――――――――――――――――――――――――――― fb0.do0 = 0 # Busy fb0.do2 = 0 # Home Busy Echo=\"\" Echo=\"@GOHOME#\" TCP_S1.send Echo # 에코 응답 발송 selucrd 1 H_Pos=Pose(-1.326,115.803,-25.895,1.014,-89.980,-183.154) # 홈위치(Fixed) H_Vel=50 # 홈위치 이동 S1 move P,tg=H_Pos,spd=H_Vel%,accu=3,tool=31 # 명령어, 에코, 옵션 데이터 초기화 fb0.do2 = 1 # Home Busy fb0.do0 = 1 # Busy Echo=\"\" Op_Data=\"\" Cmd=\"\" #――――――――――――――――――――――――――――――――――――――――――――――――― end </s><s>Hyundai Robot Job File; { version: 1.6, mech_type: \"-1()\", total_axis: -1, aux_axis: -1 } # \"0030_KD_GOSTPS.job\" # 프로토콜 시험용 - 서브프로그램3 # 작업 시작위치 이동 #――――――――――――――――――――――――――――――――――――――――――――――――― #――――――――――――――――――――――――――――――――――――――――――――――――― fb0.do0 = 0 # Busy Echo=\"\" Echo=\"@GOSTPS#\" TCP_S1.send Echo # 에코 응답 발송 # 첫 스텝 이동 S1 move P,spd=60%,accu=0,tool=31 [22.524,-420.129,622.528,-0.005,1.277,3.391,\"u1\",\"r1;nf\"] # 명령어, 에코, 옵션 데이터 초기화 fb0.do0 = 1 # Busy Echo=\"\" Op_Data=\"\" Cmd=\"\" #――――――――――――――――――――――――――――――――――――――――――――――――― end </s><s>Hyundai Robot Job File; { version: 1.6, mech_type: \"-1()\", total_axis: -1, aux_axis: -1 } # \"0021_KD_EnetSub2.job\" # 프로토콜 시험용 - 서브태스크 프로그램2 # 통신 프로그램 시험용 - 데이터 수신&처리 프로그램 #――――――――――――――――――――――――――――――――――――――――――――――――― #――――――――――――――――――――――――――――――――――――――――――――――――― # 변수 설정 *Set var Msg_H # 수신 메시지 헤더 var Msg_X # 데이터 처리용 변수 var Len # 데이터 길이 확인용 변수 # 통신 파라미터 설정 TCP_S2.ip_addr=\"192.168.1.2\" # remote (상대방) IP address TCP_S2.lport=5601 # local (자신) port; TCP Server port # (port no. 49152–65535 contains dynamic or private ports) # 이더넷 소켓 열기 TCP_S2.open TCP_S2.listen() TCP_S2.accept() 500000,*TimeOut # client로부터의 connect 대기 print TCP_S2.state() # 1이면 정상 if TCP_S2.state()!=1 then *Comm_Error task sync,id=1,no=3 # ENet객체 생성을 위한 동기 #print \"Sync with maintask & subtask2\" #――――――――――――――――――――――――――――――――――――――――――――――――― # 데이터 명령어"
			}
		},
		{
			"id": 450838759703112275,
			"distance": 0.9555985927581787,
			"entity": {
				"id": 450838759703112275,
				"description": "} cli.post domain+\"/display/update\" #case 2 var url = domain+\"/display/update\" cli.post url, 1000, *TimeOut </s><s> 설명 HTTP DELETE 서비스를 요청합니다. 요청한 자원을 삭제합니다. body 속성은 사용되지 않습니다. 문법 <HttpCli객체>.post <URL 문자열, 대기시간, 퇴피주소> 파라미터 항목 의미 기타 URL 문자열 요청 URL 대기시간 (Optional) timeout 시간. 경과하면 다음 명령문, 혹은 퇴피스텝으로 진행한다. 지정하지 않으면 무한 대기한다. msec 퇴피주소 (Optional) timeout 일 때 분기할 주소. 지정하지 않으면 다음 주소로 진행한다. 주소 사용 예 var domain=\"http://192.168.1.200:8888\" cli.delete domain+\"/items\" </s><s> HTTP 주요 응답 코드 응답대역 응답코드 설명 Informational 100 continue 101 Switching protocols Success 200 OK 201 Created 202 Accepted 203 Non-authoritative information 204 No content Redirection 301 Moved permanently 302 Not temporarily 303 Not modified Client error 400 Bad Request 401 Unauthorized 402 Payment required 403 Forbidden 404 Not found 405 Method not allowed 407 Proxy authentication required 408 Request timeout 410 Gone 412 Precondition failed 414 Request-URI too long Server error 500 Internal server error 501 Not implemented 503 Service unnailable 504 Gateway timeout 505 HTTP version not supported 에러 코드(Exception) 에러명 에러코드 설명 RequestException -1 There was an ambiguous exception that occurred while handling your request. ConnectionErr -2 In the event of a network problem (e.g. DNS failure, refused connection, etc) HTTPError -3 It will occur if the HTTP request returned an unsuccessful status code. URLRequired -4 A valid URL is required to make a request. TooManyRedirects -5 If a request exceeds the configured number of maximum redirections, a TooManyRedirects exception is raised. Timeout -6 If a request times out, a Timeout exception is raised. </s><s> import http_cli var cli=http_cli.HttpClient() var url, body, query, status_code var domain=\"http://192.168.1.200:8888\" # get cli.get domain+\"/device/direction\" body = cli.body #check the communication status if cli.status>=400 or cli.status<0 goto 99 #http communication error endif # put url = domain+\"/device/direction\" body.ry=90 cli.body=body cli.put(url, 3000, *Timeout) # post cli.body={ name: \"WORK #32\", color: \"green\", state: \"OK\" } cli.post domain+\"/display/update\", 5000, *Timeout # delete cli.delete(domain+\"/items\") end 99 print \"error status\" *Timeout print \"timeout\" </s><s> 설명 print문을 통해 티치펜던트의 안내표시줄에 문자열을 출력합니다. 문자열 상수 뿐만 아니라, 어떤 타입의 표현식(상수, 변수 포함)을 지정해도 그 결과를 문자열로 변환하여 출력합니다. 표현식을 여러 개 지정하면 각 표현식들을 공백 1글자로 구분하여 출력합니다. 문법 print <표현식>[,<표현식>,<표현식>...] 파라미터 항목 의미 기타 표현식 (expression) 출력할 표현식. 논리, 숫자, 문자열, 배열, 객체의 모든 타입을 지원합니다. 사용 예 print \"hello, world\" print arr[0],arr[1],arr[2] print \"x-center: \"+(width/2), \"y-center: \"+(height/2) print po10+sft21 </s><s> 설명 input문을 통해 티치펜던트의 키입력으로 문자열을 입력받아 변수에 저장합니다. 제한시간까지 입력되지 않으면 다음 명령문으로 진행하거나 timeout 주소로 분기합니다. 문법 input <변수>[,<제한시간>,<timeout 주소>] 파라미터 항목 의미 기타 변수 입력을 받을 변수. 숫자도 문자열 타입으로 입력받습니다. 수치값이 필요하면 int( )나 double( ) 함수로 변환하십시오. 제한시간 입력을 대기할 최대 제한 시간 (timeout) 산술식 0.1~60.0 sec timeout 주소 제한시간 초과 시, 분기할 주소 주소 사용 예 input work_no input work_no,10 input work_no,10,*timeout </s><s> Hi6 제어기의 COM 포트를 통해, 시리얼 통신을 수행할 수 있습니다. 이 기능을 사용하기 위해서는 아래와 같이 sci 모듈을 import한 후, Sci 객체를 생성해야 합니다. 또한 사용하기 전에 반드시 [시스템 > 2. 제어파라미터 > 3. 시리얼 포트] 의 설정 사양을 확인하세요. import sci var sci2=sci.Sci(2) Sci 객체를 생성한 후에는 send, recv, open, close 멤버 프로시져를 호출하면 됩니다. send를 호출할 때는, 미리 전송할 문자열을 대입해두어야합니다. recv를 호출할 때는, 성공적으로 수신하면 응답 문자열을 반환합니다. open를 호출하여 port를 open 하게 됩니다. close를 호출하여 port를 close 하게 됩니다. </s><s> 설명 Sci 객체를 생성합니다. 참조를 리턴합니다. 문법 Sci(port number) 리턴값 생성된 객체의 참조 사용 예 var sci2 = sci.Sci(2) </s><s> 설명 Sci의 send 를 호출하여 문자열을 송신합니다. 문법 <Sci객체>.send(송신 문자열) 리턴값 송신 문자열의 길이 사용 예 sci2.send(\"test\") or sci2.send \"test\" </s><s> 설명 Sci의 open 를 호출하여 시리얼 포트를 오픈합니다. 제어기 설정을 통해 기 설정된 내용으로 시리얼 포트를 오픈하게 되며, 이전에 해당 포트를 close한 경우 외 에는 open을 별도로 수행 할 필요가 없습니다.(기본값: open) 문법 <Sci객체>.open 리턴값 0: 오픈 성공 <0: 오픈 실패 사용 예 sci2.open </s><s> 설명 Sci의 close 를 호출하여 시리얼 포트를 닫습니다. 문법 <Sci객체>.close 리턴값 0: 닫기 성공 -1: 이미 닫혔음. 사용 예 sci2.close </s><s> Hyundai Robot Job File; { version: 1.6, mech_type: \"388(HS220-02)\", total_axis: 6, aux_axis: 0 } # sci 모듈 import 후, 생성자로 Sci 객체 생성 import sci var sci2=sci.Sci(2) #port no. (com2) # default open # send sci2.send \"test\" # receive (선택옵션: 3000msec 타임 아웃시, 99행으로 분기) var msg=sci2.recv(3000,99) print msg # close sci2.close # re-open sci2.open end 99 print \"error\" </s><s> Hi6 제어기의 범용 이더넷 포트를 통해, 외부 장치와 이더넷 TCP 혹은 UDP 통신으로 문자열, 혹은 바이너리 데이터의 송수신을 할 수 있습니다. enet 모듈은 ENet과 BBuf의 2개의 객체를 생성할 수 있습니다. ENet은 이더넷 socket 인터페이스를 제공하고, BBuf는 바이너리 데이터 통신을 할 때 사용됩니다. client 예제와 server 예제를 따라가면서 사용법을 이해해 봅시다. 각 객체의 멤버 변수와 함수들의 참조설명서(reference guide)는 그 뒤에 이어집니다. </s><s> UDP peer-to-peer (1:1통신), 혹은 TCP client 예제 프로그램을 문자열과 바이너리 송수신 방식으로 나누어 설명합니다. </s><s> 다음과 같은 순서로 수행합니다. enet 모듈 import 후, 생성자로 ENet 객체 생성. 멤버변수로 IP주소와 port번호를 설정. open 멤버 프로시져로 ethernet socket 열고, state() 멤버변수로 상태 확인. (TCP통신인 경우에는 open 후 connect 프로시져도 수행해야 함.) send, recv 멤버 프로시져로 송수신 수행. close 멤버 프로시져로 통신 연결 닫기. UDP peer-to-peer # 1. enet 모듈 import 후, 생성자로 ENet 객체 생성 import enet var cli=enet.ENet() # TCP 통신인 경우, ENet(\"tcp\") # 2. IP주소와 port번호 설정 cli.ip_addr=\"192.168.1.172\" # remote (상대방) IP address cli.lport=51001 # local (자신) port cli.rport=51002 # remote (상대방) port # (port no. 49152–65535 contains dynamic or private ports) # 3. ethernet socket 열기 cli.open print cli.state() # 1이면 정상 # -------------------------------- # 4-1. string 송신 cli.send \"hello, peer. \" # 4-2. string 수신 # (5초간 수신 없으면 *TimeOut 레이블로 jump) var msg cli.recv 5000, *TimeOut var msg=result() # 수신된 문자열 print msg delay 1.0 # --------------------------------"
			}
		},
		{
			"id": 450838759703112267,
			"distance": 1.0895909070968628,
			"entity": {
				"id": 450838759703112267,
				"description": "리턴합니다.(첫 문자 위치는 0. 없으면 -1.) strpos(str, \"llo\") strpos(str, \"hi\") 2 -1 </s><s> 함수 설명 사용 예 결과 date( ) 현재의 날짜를 문자열 형으로 리턴합니다. (YYYY-MM-DD형식) date( ) \"2019-04-17\" time( ) 현재의 시간을 문자열 형으로 리턴합니다. (HH:MM:SS형식) time( ) \"08:48:14\" timer( ) 전원투입 시로부터 경과한 시간을 초(sec) 단위로 리턴합니다. timer( ) 2796.37 </s><s> 매개변수를 입력받아 새로운 객체를 생성하여 리턴해주는 함수입니다. 함수 설명 사용 예 결과 Array(n) Array(a, b, c) 요소 n개의 배열을 생성해 리턴합니다. 요소의 초기값은 0입니다. 인수를 2개 이상 지정하면 다차원 배열이 생성됩니다. \"4.1.3 배열 생성자 함수 - Array()\"를 참조하십시오. Array(900) Array(3,4) 배열[900] 배열[3][4] Pose(요소) 포즈 객체를 생성해 리턴합니다. \"5.1 포즈 (pose)\"를 참조하십시오. 포즈 객체 Shift(요소) 시프트 객체를 생성해 리턴합니다. \"5.2 시프트 (shift)\"를 참조하십시오. 시프트 객체 </s><s> 함수 설명 사용 예 결과 cpo(crd, mode) 로봇이 취하고 있는 현재 자세(current pose)를 crd좌표계로 리턴합니다. crd 인수로 사용할 수 있는 값은 \"5.1 포즈 (pose)\"의 표를 참조하십시오. mode가 \"cmd\"이면 지령값, \"cur\"이면 현재값입니다. crd, mode 파라미터를 생략 가능하며 디폴트값은 각각 \"base\", \"cur\" 입니다. cpo(\"joint\", \"cmd\") 로봇의 지령값을 축좌표계로 보관하는 포즈* gather_state() gather문 수행에 의한 데이터 수집 동작의 현재 상태를 리턴 받을 수 있습니다. gather_state() 0 : 미수행 중. 1 : 수행 중. 2 : 결과를 file로 저장 중. mkucs(n,po) mkucs(n,po1,po2,po3) n번 사용자좌표계 객체를 생성하여 등록합니다. \"5.5 사용자좌표계 (UCS ; User Coordinate System)\"를 참조하십시오. 0 : OK <0 : 에러코드 result() 일부 프로시져는 수행 결과를 확인해야 할 경우가 있습니다. 프로시져 수행 직후 result( ) 함수를 호출하면, 수행 결과를 리턴 받을 수 있습니다. result() mkshift(3,ref_po,mea_po,2.0) mkshift(5,ref_po,mea_sft) 다수의 기준이 되는 포즈에 해당하는 측정된 포즈나 쉬프트 데이터들로 부터 최적화된 쉬프트 값을 계산하여 리턴합니다. tolerance에 해당하는 4번째 파라미터가 0보다 크게 지정된 경우에 계산된 쉬프트 값이 이 값보다 크면 에러로 정지합니다. # 참고 사항 ref_po(기준이 되는 포즈), mea_po(측정된 포즈)는 포즈 변수의 배열, mea_sft(측정된 쉬프트)는 쉬프트 변수의 배열의 타입입니다. tolerance에 해당하는 4번째 파라미터가 없으면 에러를 검지하지 않습니다. 현재 지원하는 위치는 최대 100개입니다. sft1=mkshift(4,ref_po,mea_po,3.0) 쉬프트 calshift(po1,po2) calshift(po1,po2,\"TV\") 2개의 포즈간의 차이를 쉬프트 값으로 리턴합니다. \"TV\" 파라미터가 있으면 툴의 수직 방향의 자세를 쉬프트 값으로 리턴합니다. sft1=calshift(po1,po2) 쉬프트 po.valid() 포즈 객체에 대한 정보가 로봇의 동작범위 내에 있는지 리턴합니다. # 사용 예 if po1.valid()==0 stop # 로봇 정지 endif var ret=po1.valid() 0:동작범위 밖 1:동작범위 내 po.str_array() 포즈 객체에 대한 정보를 배열 형식의 문자열로 리턴합니다. # 사용 예 var msg=cpo().str_array() print msg # [1850.000,2010.500,0.000,0.000,-90.000,0.000,\"base\"] msg=po1.str_array() 문자열 sft.str_array() 쉬프트 객체에 대한 정보를 배열 형식의 문자열로 리턴합니다. # 사용 예 var sft1=Shift(0.000,0.000,30.000,0.000,0.000,0.000,\"base\") var msg=sft1.str_array() print msg # [0.000,0.000,30.000,0.000,0.000,0.000,\"base\"] msg=sft1.str_array() 문자열 upo(crd) move ~ until문 수행시 until 조건이 만족했을 때의 현재 자세(current pose)를 crd좌표계로 리턴합니다. crd 인수로 사용할 수 있는 값은 \"5.1 포즈 (pose)\"의 표를 참조하십시오. crd 파라미터를 생략 가능하며 디폴트값은 각각 \"base\" 입니다. upo(\"joint\") 로봇의 포즈* * 포즈(pose)는 로봇의 자세 혹은 툴 끝의 위치를 나타내는 데이터형입니다. 이후의 \"5.1 포즈 (pose)\"에서 자세히 설명합니다. </s><s> 설명 일부 기능은 hrspace 내장 기능으로서는 기본 제공하지 않지만, 플러그인 모듈(plug-in module)의 형태로 지원되기도 합니다. hrscript의 일부 기능은 hrscript가 기본으로 제공하지 않지만, 플러그인 모듈(plug-in module)의 형태로 지원하기도 합니다. 기본 옵션으로서 미리 설치되어 있는 모듈도 있고, 사용자가 설치해주어야 하는 모듈도 있습니다. 모듈은 import문을 써서 제어기로 load 해야만 로봇언어에서 사용 가능합니다. 문법 import <모듈명> [as <별칭>] 파라미터 항목 의미 기타 모듈명 모듈의 이름 별칭(alias) 로봇언어 프로그램 내에서 사용할 이름. 지정하면 모듈명 대신 사용 가능. 가령, 로봇언어에서 이더넷 TCP나 UDP 통신을 하기 위해서는 enet이라는 기본 옵션 모듈을 import해야 합니다. import를 수행하고 나면, enet이라는 이름의 모듈 객체가 전역 스코프(global scope)에 생성됩니다. 아래 예제의 enet.ENet()와 같이 모듈 객체의 멤버변수나 멤버함수를 사용할 수 있으며, 특히 멤버함수 중 생성자를 호출하여 새로운 객체를 생성할 수 있습니다. 사용 예 아래 예에서는, (1) enet 모듈 객체를 import 했습니다. (2) enet.ENet() 생성자 함수를 호출하여 새로운 이더넷 소켓 객체를 생성한 후 이를 cli 라는 이름의 지역변수에 대입했습니다. (3) cli 객체의 ip_addr 멤버변수에 문자열을 대입했습니다. import enet # (1) var cli=enet.ENet() # (2) cli.ip_addr=\"192.168.1.172\" # (3) 아래와 같이 작성해도 동일한 동작을 수행합니다. import enet as enet_module # (1) var cli=enet_module.ENet() # (2) cli.ip_addr=\"192.168.1.172\" # (3) 이 절에서는 import문에 대한 개략적인 문법만 다루었습니다. 이 후, 모듈 기능들을 설명하는 절에서 import의 사용 예를 자주 보게 될 것입니다. </s><s> 순서대로 다음 행을 수행하지 않고 프로그램의 다른 위치로 이동하는 것을 분기(branch)라고 합니다. 주소란 분기의 목적지(destination) 입니다.주소를 정의하는 방법은 아래와 같이 3가지 형식이 있습니다. 종류 형식 예 행번호 (line-number) 1~9999 의 정수입니다. 스텝(move)이 아닌 명령문의 왼쪽에 지정할 수 있습니다. 99 레이블 (label) 레이블은 명령문에 지정하는 것이 아니라 그 자체로 명령문입니다. \\* 뒤에 [식별자](#/view/doc-hrscript/korean/3-flowcontrol-subprogram/2-identifier)를 붙인 형식입니다. 단 식별자의 길이는 128자 이하여야 합니다. *timeout 스텝 번호 (step number) 스텝(move) 명령문에 자동으로 1씩 증가하며 매겨집니다. S뒤에 스텝의 번호를 붙인 형식입니다. S1~S999까지 지정 가능합니다. S15 아래의 예에서 두 번째 명령문의 10은 행번호이고, *err_handle은 레이블, S12는 스텝 번호입니다. move P,po3,spd=80%,accu=1,tool=3 until do33 10 z_pos = (base_height+offset)*1.05 # robot has to wait sensor2 input *err_handle S12 move P,spd=80%,accu=1,tool=3 </s><s> 설명 프로그램을 정지시킵니다. 재기동하면 다음 행부터 계속 수행합니다. 문법 stop 사용 예 if di9 stop endif </s><s> 설명 프로그램을 정지시킵니다. 연속 재생모드이거나 재기동하면 주 프로그램의 처음부터 다시 수행합니다. 문법 end 사용 예 move p,spd=70%,accu=1,tool=0 move p,spd=70%,accu=1,tool=0 end </s><s> 설명 지정한 시간 동안 대기한 후 다음 명령문으로 진행합니다. 문법 delay <시간> 파라미터 항목 의미 기타 시간 대기할 시간 산술식 0.1~60.0 sec 사용 예 delay 3.5 </s><s> 설명 지정한 조건이 참이 될 때까지 대기한 후 다음 명령문으로 진행합니다. 문법 wait <조건>[,<제한시간>,<timeout 주소>] 파라미터 항목 의미 기타 조건 대기할 조건 조건식 제한시간 조건이 거짓일 경우 대기할 최대 제한 시간 (timeout) 산술식 0.1~60.0 sec timeout 주소 제한시간 초과 시, 분기할 주소 주소 사용 예 wait sensor_ok wait (sensor_ok and pos_ok),10,*timeout </s><s> 설명 지정한 주소로 분기합니다. 문법 goto <주소> 파라미터 항목 의미 기타 주소 분기할 주소 행 번호인 경우 산술식도 가능 사용 예 goto 99 goto addr goto *err_hdl </s><s> 설명 gosub문을 만나면 지정한 주소로 분기합니다. retsub문을 만나면 gosub문 다음 위치로 복귀합니다. gosub를 여러 단계로 내포할 수도 있으며 내포 횟수의 제약은 없습니다. 문법 gosub <주소> ..."
			}
		},
		{
			"id": 450838759703112274,
			"distance": 1.0950745344161987,
			"entity": {
				"id": 450838759703112274,
				"description": "dob[0~1], dow[0]은 모두 동일한 출력신호입니다. 인덱스는 do는 bit단위, dob, dow, dol, dof는 byte단위로 매겨집니다. do로 시작하는 출력변수에 값을 대입하면, I/O신호 출력이 수행됩니다. 현재, 입력되고 있는 I/O신호값은 di로 시작하는 입력변수값을 읽어 얻을 수 있습니다. do변수는 읽기, 쓰기가 모두 가능하지만, di변수는 읽기만 가능합니다. fb 객체명은 아래와 같이 생략할 수도 있습니다. 객체명 do 표기 fb.do 표기 fb0 do0 ~ do959 fb0.do0 ~ fb0.do959 fb1 do960 ~ do1919 fb1.do0 ~ fb1.do959 fb2 do1920 ~ do2879 fb2.do0 ~ fb2.do959 fb3 do2880 ~ do3839 fb3.do0 ~ fb3.do959 fb4 do3840 ~ do4799 fb4.do0 ~ fb4.do959 fb5 do4800 ~ do5759 fb5.do0 ~ fb5.do959 fb6 do5760 ~ do6719 fb6.do0 ~ fb6.do959 fb7 do6720 ~ do7679 fb7.do0 ~ fb7.do959 fb8 do7680 ~ do8639 fb8.do0 ~ fb8.do959 fb9 do8640 ~ do9599 fb9.do0 ~ fb9.do959 </s><s> 아래의 사용 예를 참고하십시오. do2=1 # fb0의 2번 비트출력값 켠다. fb2.dob3=0b00001111 # fb2의 3번 바이트출력값을 2진 bit열로 지정 fb[4].dob1=0x0F # fb4의 1번 바이트출력값 하위 4비트를 켜고, 상위 4비트를 끈다. var work_no=fb9.dib3 # fb9의 3번 바이트입력값을 work_no 변수에 대입 if fb5.di43 then *err # fb5.di42가 켜지면 *err 레이블로 분기 for idx=21 to 29 fb3.do[idx]=1 # fb3의 출력신호 do21 ~ do29를 모두 켠다. next fb2.do3=fb2.do7=fb2.do11=1 # fb2의 3번, 7번, 11번 출력신호를 한꺼번에 켠다. </s><s> fb객체의 특정 영역을 지정하여 fn객체를 정의할 수 있습니다. Hi6 제어기가 필드버스 master이고, 여러 개의 필드버스 slave장치들이 있을 경우, 각 slave장치의 영역들을 하나씩의 fn객체로 설정해두면, 이 slave들을 직관적으로 다룰 수 있습니다. fn영역을 설정하는 방법은 아래 링크를 참조하십시오. 조작설명서: 7.3.2.12 fn 블럭 할당 fn의 문법은 fb와 동일한 형식입니다. fn 인덱스는 0~63이며, bit 인덱스는 fb와 동일하게 0~959입니다. 즉, 최대 설정 가능한 인덱스는 fn0.do0 ~ fn63.do959 입니다. 미설정된 존재하지 않는 fn객체에 접근하거나, fn의 설정 범위를 초과하는 do/di에 접근 시, 에러가 발생합니다. 아래의 사용 예를 참고하십시오. fn2.dob3=0b00001111 # fn2의 3번 바이트출력값을 2진 bit열로 지정 fn[4].dob1=0x0F # fn4의 1번 바이트출력값 하위 4비트를 켜고, 상위 4비트를 끈다. var work_no=fn63.dib3 # fn63의 3번 바이트입력값을 work_no 변수에 대입 if fn5.di43 then *err # fn5.di42가 켜지면 *err 레이블로 분기 for idx=21 to 29 fn3.do[idx]=1 # fn3의 출력신호 do21 ~ do29를 모두 켠다. next fn2.do3=fn2.do7=fn2.do11=1 # fn2의 3번, 7번, 11번 출력신호를 한꺼번에 켠다. </s><s> pulse문은 펄스 형태의 신호 출력을 위해 사용하는 프로시져 입니다. 설명 tlag 시간 후에, ton 시간 동안 On(High), toff 시간 동안 Off(Low) 형태의 펄스가 cnt 횟수만큼 출력됩니다. 문법 pulse <신호>,tlag=<지연 시간>,ton=<On 시간>,toff=<Off 시간>,cnt=<출력 횟수> 파라미터 항목 의미 기타 신호 펄스 형태로 출력할 출력신호명 (fb.do 신호만을 지원합니다.) 문자열 지연 시간 프로시져 수행 후 펄스 신호가 시작될 때까지 대기할 시간 (0.0 ~ 100.0[sec]) 변수 On 시간 신호를 On(High) 상태로 출력할 시간 (0.0 ~ 100.0[sec]) 변수 Off 시간 신호를 Off(Low) 상태로 출력할 시간 (0.0 ~ 100.0[sec]) 변수 출력 횟수 펄스 주기를 반복할 횟수 (0 ~ 1000) 변수 사용 예 pulse do10,tlag=0.0,ton=1.5,toff=0.5,cnt=5 end </s><s> Hi6 제어기의 범용 이더넷 포트를 통해, 원격의 웹 서비스에 접근하여 HTTP 서비스를 받을 수 있습니다. 이 기능을 사용하기 위해서는 아래와 같이 http_cli 모듈을 import한 후, HttpCli 객체를 생성해야 합니다. import http_cli var cli=http_cli.HttpCli() HttpCli 객체를 생성한 후에는 get, put, post, delete 멤버 프로시져를 호출하여 서비스 요청할 하면 됩니다. HttpCli 객체는 body라는 이름의 속성을 가지고 있습니다. get 서비스를 요청하여 성공적으로 응답을 받으면 원격 서버가 응답으로 보내준 데이터는 body 속성이 갖고 있게 됩니다. body 속성 값의 타입은 문자열일 수도 있고, 숫자나 배열, 객체일 수도 있습니다. put 서비스를 요청할 때는, body 속성에 미리 전송할 데이터를 대입해두어야 합니다. post 서비스를 요청할 때는 body 속성에 미리 전송할 데이터를 대입해두어야 하며, 원격 서버가 응답으로 보내준 데이터는 body 속성에 보관됩니다. delete 서비스는 body 속성을 사용하지 않습니다. 제공되는 Http 클라이언트 통신은 동기 통신으로 진행됩니다. </s><s> 변수명 데이터형 설명 body 모든 형 가능 put과 post 요청에 실어보낼 데이터를 미리 넣어두어야 합니다. body에 object가 아닌 다른 형을 대입시에는 URL의 마지막 경로값을 Key로 처리하여 수행합니다. get과 post 요청의 응답이 보관됩니다. HRScript 에서는 직접적으로 body의 멤버변수에 접근을 할 수 없으므로, 해당 내용의 수정, 사용을 위해서는 다른 변수로 대입을 하여 사용 바랍니다. query object query를 요구하는 get service에 사용됩니다. get 요청에 실어보낼 데이터를 미리 넣어 두어야합니다 status int http 통신 응답 코드와 에러 코드를 반환합니다. (6.2.4 HTTP 통신 코드) body와 query는 object형이 사용됩니다. object 형은 {key:value}의 형식으로 지원됩니다. cli.body = { name: \"WORK #32\", color: \"green\", state: \"OK\" } cli.query = { axis: 3 } </s><s> 설명 HTTP GET 서비스를 요청합니다. 서버는 요청받은 URL의 정보를 검색하여 응답합니다. 응답 데이터는 body 속성으로 받습니다. 문법 <HttpCli객체>.get <URL 문자열, 대기시간, 퇴피주소> 파라미터 항목 의미 기타 URL 문자열 요청 URL 대기시간 (Optional) timeout 시간. 경과하면 다음 명령문, 혹은 퇴피스텝으로 진행한다. 지정하지 않으면 무한 대기한다. msec 퇴피주소 (Optional) timeout 일 때 분기할 주소. 지정하지 않으면 다음 주소로 진행한다. 주소 사용 예 #case 1 var domain=\"http://192.168.1.200:8888\" cli.get domain+\"/setting/max_torque\" #case 2 var url = domain+\"/joints/max_speed\" cli.query = {axis: 3} cli.get(url) </s><s> 설명 HTTP PUT 서비스를 요청합니다. 요철된 자원을 수정(update)합니다. 전송할 데이터는 body 속성에 미리 대입해 두어야 합니다. 문법 <HttpCli객체>.put <URL 문자열, 대기시간, 퇴피주소> 파라미터 항목 의미 기타 URL 문자열 요청 URL 대기시간 (Optional) timeout 시간. 경과하면 다음 명령문, 혹은 퇴피스텝으로 진행한다. 지정하지 않으면 무한 대기한다. msec 퇴피주소 (Optional) timeout 일 때 분기할 주소. 지정하지 않으면 다음 주소로 진행한다. 주소 사용 예 #case 1 var domain=\"http://192.168.1.200:8888\" cli.body=500 cli.put domain+\"/setting/max_torque\" #case 2 var url = domain + \"/setting\" cli.body = {max_torque: 500} cli.put (url, 5000, S1) </s><s> 설명 HTTP POST 서비스를 요청합니다. 요청된 자원을 생성(create)합니다. 전송할 데이터는 body 속성에 미리 대입해 두어야 합니다. 응답 데이터는 body 속성으로 받습니다. 문법 <HttpCli객체>.post <URL 문자열, 대기시간, 퇴피주소> 파라미터 항목 의미 기타 URL 문자열 요청 URL 대기시간 (Optional) timeout 시간. 경과하면 다음 명령문, 혹은 퇴피스텝으로 진행한다. 지정하지 않으면 무한 대기한다. msec 퇴피주소 (Optional) timeout 일 때 분기할 주소. 지정하지 않으면 다음 주소로 진행한다. 주소 사용 예 #case 1 var domain=\"http://192.168.1.200:8888\" cli.body={ name: \"WORK #32\", color: \"green\", state: \"OK\" } cli.post domain+\"/display/update\" #case 2 var url = domain+\"/display/update\" cli.post url, 1000, *TimeOut </s><s> 설명 HTTP DELETE 서비스를 요청합니다. 요청한"
			}
		},
		{
			"id": 450838759703112270,
			"distance": 1.1150574684143066,
			"entity": {
				"id": 450838759703112270,
				"description": "전역변수 x와 지역변수 x가 동시에 존재하게 되는데, 이 때 x값을 읽어보면 지역변수가 읽힙니다. 0005.job에서 0001.job으로 리턴한 후, x값을 읽어보면 전역변수만 존재하는 상태이므로 전역변수가 읽힙니다. 0001.job global x=100 call 5 print x # 100 end 0005.job var x=\"hello\" print x # hello end </s><s> 배열은 여러 개의 값을 하나의 이름으로 모아 저장해 놓고, 인덱스(index) 번호를 통해 접근하는 변수형입니다. 배열은 다른 변수처럼 var이나 global로 정의합니다. 배열의 정의와 접근 형식은 아래와 같습니다. 정의 var 배열명 = [ 값, 값, …] 접근 배열명[인덱스] 배열을 구성하는 값들을 요소(element)라고 합니다. 위 배열 distances에는 총 5개의 요소가 있습니다. 인덱스는 0부터 시작합니다. distances의 0번 요소는 10, 1번 요소는 10.5 입니다. 배열의 특정 요소값을 읽거나 쓸 때는 아래와 같이 [ ] 연산자를 사용합니다. 아래는 객체 정의하고 접근 한 예입니다. 0001.job var distances = [ 10, 10.5, 12.7, 11.92, 9.5 ] distances[1]=20.5 print distances[0], distances[1] end 결과 10 20.5 배열의 요소 개수는 len( ) 함수로 얻을 수 있습니다. 앞에서 len( ) 함수는 문자열의 길이를 얻는 함수로서 소개된 바 있습니다. 그런데, len( )의 매개변수로 배열을 넣으면 배열의 요소 개수를 리턴해줍니다. 결과 len(a) a가 문자열이면 문자열의 길이를 리턴합니다. a가 배열이면 배열의 요소 개수를 리턴합니다. len(\"HELLO\") len([20, 30, 80]) 5 3 배열의 모든 요소들에 대해 어떤 처리를 수행하는 경우에는 주로 for~next 문이 사용됩니다. 0001.job var distances = [ 10, 10.5, 12.7, 11.92, 9.5] for i=0 to len(distances)-1 distances[i] = distances[i]+10 print distances[i] next 결과 20 20.5 22.7 21.92 19.5 배열 안에 저장되는 값들은 서로 다른 타입이어도 상관없습니다. 0001.job var arr = [ 10, \"abc\", true] for i=0 to 2 print arr[i] next 결과 10 abc true </s><s> 배열의 요소로서 배열이 내포될 수도 있습니다. 다차원 배열의 요소에 접근할 때는 [ ] 연산자를 연속적으로 사용하면 됩니다. 아래의 예에서 arr_y는 2차원 배열입니다. (1) arr_y[1]는 이 중 인덱스 1의 요소, 즉 [\"abc\", \"jqk\", \"xyz\"] 배열인데, 이를 새로운 변수 arr_x에 대입했습니다. (2) 따라서, arr_x[1]은 \"jqk\"이고, arr_y[1][2]는 arr_y[1]의 [2]를 가리키므로 \"xyz\"입니다. 0001.job var arr_y = [ [10,20], [\"abc\",\"jqk\", \"xyz\"] ] # (1) var arr_x=arr_y[1] # (2) print arr_x[1] print arr_y[1][2] 결과 jqk xyz </s><s> 수 백개의 요소를 가진 배열을 생성하고자 한다면, [ ] 표기만으로는 어렵습니다. 생성자 함수를 호출하면 원하는 개수의 배열을 생성할 수 있습니다. 각 요소는 0으로 초기화됩니다. var 배열변수명 = Array(900) # 900개의 요소를 가진 배열 생성 인수를 2개 이상 지정하면 다차원 배열을 생성할 수 있습니다. 아래 3차원 배열의 예에서는 [4]가 최하위 차원(dimension)입니다. var 배열변수명 = Array(3,2,4) # [3][2][4]개의 3차원 배열 생성 # [ [[0,0,0,0], [0,0,0,0]], [[0,0,0,0], [0,0,0,0]], [[0,0,0,0], [0,0,0,0]] ] </s><s> 앞서, 배열은 여러 개의 요소값을 보관할 수 있고, 인덱스로 접근한다는 것을 배웠습니다. 객체는 여러 요소 값을 보관한다는 점에서는 배열과 같습니다. 다른 점은 인덱스가 아닌 키(key)로 접근한다는 점입니다. 키는 숫자가 아닌 문자열입니다. 객체는 다른 변수처럼 var이나 global로 정의합니다. 객체의 정의와 접근 형식은 아래와 같습니다. 정의 var 객체명 = { 키 : 값, 키 : 값, …} 접 객체명.키 아래는 객체 정의하고 접근 한 예입니다. 0001.job var gap = { x:200, y:152.6 } gap.x = gap.x + 10 print gap.x, gap.y 결과 210 152.6 객체의 키는 반드시 식별자 형식이어야 하지만, 요소의 값은 모든 타입이 허용되며 서로 다른 타입이어도 상관없습니다. 객체는 요소로서 다른 객체나 배열을 포함할 수 있습니다. 마찬가지로 배열도 요소로서 다른 배열이나 객체를 포함할 수 있습니다. 아래 예에서, 객체 work는 객체 size와 배열 heights를 포함하고 있습니다. <td style=\"text-align:left\">false, 80, 87.600000</td> </tr> 0001.job var work = { part_no:3, name: \"gear\", tested : false , size : { x : 150, y : 80 } , heights : [ 72.89, 74.91, 81.03, 87.60, 87.11 ] } print work.tested, work.size.y, work.heights[3] 결과 </s><s> 대입문 우변이 배열이나 객체 변수인 경우, 변수의 값 전체가 좌변의 변수로 복사됩니다. 배열이나 객체가 요소값으로서 서브 배열과 서브 객체들을 복잡하게 포함하고 있을 때에도, 이러한 포함 구조들이 모두 복사되는데 이를 깊은 복사(deep copy)라고 합니다. 0001.job var my_obj = { x:5, y:0, z:0 } my_obj.y=[ [10, 20], [\"abc\", true] ] my_obj.z={ a:7, b:8 } var your_obj=my_obj # deep copy print your_obj.y[0] 결과 [10, 20] </s><s> 3.4절의 call문과 jump문 설명에서 형식 매개변수와 실 매개변수의 개념을 배운 바 있습니다. 실 매개변수를 서브 프로그램으로 전달했는데, 서브 프로그램이 이 변수의 값을 변경한 후 종료했다면 변경된 내용이 메인 프로그램에 반영되어 있을까요? 가령, 아래와 같이 세제곱을 해주는 서브 프로그램 0005_pow3.job를 만들었다고 합시다. 0001.job var x=2 call 0005_pow3,x print x end 0005_pow3.job param p var t=p p=t*t*t # (1) end 결과 2 2*2*2는 8이므로 8이 출력되기를 기대했지만, 결과는 2입니다. 숫자형 실 매개변수가 서브 프로그램으로 전달될 때는 매개변수로 값(value)이 복사되기 때문입니다. (1)에서 세제곱 값을 복사본에 대입한 것이므로 원본 변수 x의 값에는 영향을 주지 못한 것입니다. 따라서, 아래와 같이 return문으로 결과값을 전달받도록 교시 프로그램을 고쳐야 합니다. 0001.job var x=2 call 0005_pow3,x x=result() print x end 0005_pow3.job param p var t=p p=t*t*t return p 결과 8 반면, 배열이나 객체의 경우에는 복사본이 아니라 실제 변수의 참조(reference)가 전달됩니다. 참조란 변수의 위치와 같은 개념입니다. 아래와 같이 배열의 각 요소를 세제곱 해주는 서브 프로그램 0006_pow3.job의 경우에는 의도한 대로 실 매개변수 배열의 요소 값들이 변경되었습니다. 0001.job var x=[3, 2, 4] call 0006_pow3,x print x end 0006_pow3.job param p var t for i=0 to len(arr)-1 t=p[i] p[i] = t*t*t next end 결과 [27, 8, 64] 서브 프로그램 호출 시, 실 매개변수의 값의 복사본이 전달되는 것을 값에 의한 호출(call-by-value), 참조가 전달되는 것을 참조에 의한 호출(call-by-reference) 이라고 합니다. 값 호출일 지 참조 호출일 지는 아래와 같이 값의 형(type)에 의해 결정됩니다. 값에 의한 호출 bool형, 숫자형, 문자열형 참조에 의한 호출 배열형, 객체형 </s><s> 포즈는 hi6 제어기에 기본 내장된 객체형으로서, 로봇의 각 축의 자세, 혹은 툴 끝의 직교좌표와 방향을 표현합니다. 포즈는 생성자 함수 Pose( )를 호출하여 생성합니다. 함수 매개변수들은 모두 위치 매개변수입니다. crd와 cfg는 문자열형이고, 나머지는 모두 숫자형입니다. info cfg요소는 로봇 자세 (configuration)를 지정합니다. 자세한 내용은 Hi6 로봇제어기 조작설명서의 \"2.3.2.2 베이스 및 로봇 기록 좌표\"를 참조하십시오. var 포즈변수명 = Pose(j1, j2, j3, …) # 축 좌표 var 포즈변수명 = Pose(x, y, z, rx, ry, rz, j7, j8,…, crd, cfg) #"
			}
		}
	]
}
